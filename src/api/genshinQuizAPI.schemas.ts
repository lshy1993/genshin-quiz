/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Genshin Quiz API
 * API for Genshin Impact Quiz Application
 * OpenAPI spec version: 1.0.0
 */
export interface User {
  id: number;
  username: string;
  email: string;
  display_name?: string;
  avatar_url?: string;
  total_score?: number;
  quizzes_completed?: number;
  created_at: string;
  updated_at: string;
}

export interface CreateUserRequest {
  /**
   * @minLength 3
   * @maxLength 50
   */
  username: string;
  email: string;
  /** @maxLength 100 */
  display_name?: string;
  avatar_url?: string;
}

export interface UpdateUserRequest {
  /**
   * @minLength 3
   * @maxLength 50
   */
  username?: string;
  email?: string;
  /** @maxLength 100 */
  display_name?: string;
  avatar_url?: string;
}

export type QuizCategory = typeof QuizCategory[keyof typeof QuizCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuizCategory = {
  characters: 'characters',
  weapons: 'weapons',
  artifacts: 'artifacts',
  lore: 'lore',
  gameplay: 'gameplay',
} as const;

export type QuizDifficulty = typeof QuizDifficulty[keyof typeof QuizDifficulty];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuizDifficulty = {
  easy: 'easy',
  medium: 'medium',
  hard: 'hard',
} as const;

export interface Quiz {
  id: number;
  title: string;
  description?: string;
  category: QuizCategory;
  difficulty: QuizDifficulty;
  questions: Question[];
  /** Time limit in seconds */
  time_limit?: number;
  created_by: number;
  created_at: string;
  updated_at: string;
}

export type CreateQuizRequestCategory = typeof CreateQuizRequestCategory[keyof typeof CreateQuizRequestCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateQuizRequestCategory = {
  characters: 'characters',
  weapons: 'weapons',
  artifacts: 'artifacts',
  lore: 'lore',
  gameplay: 'gameplay',
} as const;

export type CreateQuizRequestDifficulty = typeof CreateQuizRequestDifficulty[keyof typeof CreateQuizRequestDifficulty];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateQuizRequestDifficulty = {
  easy: 'easy',
  medium: 'medium',
  hard: 'hard',
} as const;

export interface CreateQuizRequest {
  /**
   * @minLength 1
   * @maxLength 200
   */
  title: string;
  /** @maxLength 1000 */
  description?: string;
  category: CreateQuizRequestCategory;
  difficulty: CreateQuizRequestDifficulty;
  /** @minItems 1 */
  questions: CreateQuestionRequest[];
  /**
   * @minimum 30
   * @maximum 3600
   */
  time_limit?: number;
  created_by: number;
}

export type UpdateQuizRequestCategory = typeof UpdateQuizRequestCategory[keyof typeof UpdateQuizRequestCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateQuizRequestCategory = {
  characters: 'characters',
  weapons: 'weapons',
  artifacts: 'artifacts',
  lore: 'lore',
  gameplay: 'gameplay',
} as const;

export type UpdateQuizRequestDifficulty = typeof UpdateQuizRequestDifficulty[keyof typeof UpdateQuizRequestDifficulty];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateQuizRequestDifficulty = {
  easy: 'easy',
  medium: 'medium',
  hard: 'hard',
} as const;

export interface UpdateQuizRequest {
  /**
   * @minLength 1
   * @maxLength 200
   */
  title?: string;
  /** @maxLength 1000 */
  description?: string;
  category?: UpdateQuizRequestCategory;
  difficulty?: UpdateQuizRequestDifficulty;
  /** @minItems 1 */
  questions?: CreateQuestionRequest[];
  /**
   * @minimum 30
   * @maximum 3600
   */
  time_limit?: number;
}

export type QuestionQuestionType = typeof QuestionQuestionType[keyof typeof QuestionQuestionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuestionQuestionType = {
  multiple_choice: 'multiple_choice',
  true_false: 'true_false',
  fill_in_blank: 'fill_in_blank',
} as const;

export interface Question {
  id: number;
  question_text: string;
  question_type: QuestionQuestionType;
  options?: string[];
  correct_answer: string;
  explanation?: string;
  points: number;
  order_index: number;
}

export type CreateQuestionRequestQuestionType = typeof CreateQuestionRequestQuestionType[keyof typeof CreateQuestionRequestQuestionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateQuestionRequestQuestionType = {
  multiple_choice: 'multiple_choice',
  true_false: 'true_false',
  fill_in_blank: 'fill_in_blank',
} as const;

export interface CreateQuestionRequest {
  /**
   * @minLength 1
   * @maxLength 500
   */
  question_text: string;
  question_type: CreateQuestionRequestQuestionType;
  options?: string[];
  /** @minLength 1 */
  correct_answer: string;
  /** @maxLength 1000 */
  explanation?: string;
  /**
   * @minimum 1
   * @maximum 100
   */
  points: number;
  /** @minimum 1 */
  order_index: number;
}

export interface Error {
  error: string;
  message: string;
  code: number;
}

/**
 * Bad request
 */
export type BadRequestResponse = Error;

/**
 * Resource not found
 */
export type NotFoundResponse = Error;

/**
 * Internal server error
 */
export type InternalServerErrorResponse = Error;

export type GetUsersParams = {
/**
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * @minimum 0
 */
offset?: number;
};

export type GetUsers200 = {
  users?: User[];
  total?: number;
  limit?: number;
  offset?: number;
};

export type GetQuizzesParams = {
/**
 * @minimum 1
 * @maximum 100
 */
limit?: number;
/**
 * @minimum 0
 */
offset?: number;
category?: GetQuizzesCategory;
difficulty?: GetQuizzesDifficulty;
};

export type GetQuizzesCategory = typeof GetQuizzesCategory[keyof typeof GetQuizzesCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetQuizzesCategory = {
  characters: 'characters',
  weapons: 'weapons',
  artifacts: 'artifacts',
  lore: 'lore',
  gameplay: 'gameplay',
} as const;

export type GetQuizzesDifficulty = typeof GetQuizzesDifficulty[keyof typeof GetQuizzesDifficulty];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetQuizzesDifficulty = {
  easy: 'easy',
  medium: 'medium',
  hard: 'hard',
} as const;

export type GetQuizzes200 = {
  quizzes?: Quiz[];
  total?: number;
  limit?: number;
  offset?: number;
};

