{"version":3,"file":"index.js","names":["ANGULAR_DEPENDENCIES: GeneratorDependency[]","getAngularDependencies: ClientDependenciesBuilder","generateAngularTitle: ClientTitleBuilder","generateAngularHeader: ClientHeaderBuilder","generateAngularFooter: ClientFooterBuilder","generateAngular: ClientBuilder","angularClientBuilder: ClientGeneratorsBuilder"],"sources":["../src/index.ts"],"sourcesContent":["import {\n  ClientBuilder,\n  ClientDependenciesBuilder,\n  ClientFooterBuilder,\n  ClientGeneratorsBuilder,\n  ClientHeaderBuilder,\n  ClientTitleBuilder,\n  generateFormDataAndUrlEncodedFunction,\n  generateMutatorConfig,\n  generateMutatorRequestOptions,\n  generateOptions,\n  generateVerbImports,\n  GeneratorDependency,\n  GeneratorOptions,\n  GeneratorVerbOptions,\n  isBoolean,\n  pascal,\n  sanitize,\n  toObjectString,\n} from '@orval/core';\n\nconst ANGULAR_DEPENDENCIES: GeneratorDependency[] = [\n  {\n    exports: [\n      { name: 'HttpClient', values: true },\n      { name: 'HttpHeaders' },\n      { name: 'HttpParams' },\n      { name: 'HttpContext' },\n      { name: 'HttpResponse', alias: 'AngularHttpResponse' }, // alias to prevent naming conflict with msw\n      { name: 'HttpEvent' },\n    ],\n    dependency: '@angular/common/http',\n  },\n  {\n    exports: [\n      { name: 'Injectable', values: true },\n      { name: 'inject', values: true },\n    ],\n    dependency: '@angular/core',\n  },\n  {\n    exports: [{ name: 'Observable', values: true }],\n    dependency: 'rxjs',\n  },\n  {\n    exports: [{ name: 'DeepNonNullable' }],\n    dependency: '@orval/core',\n  },\n];\n\nconst returnTypesToWrite = new Map<string, string>();\n\nexport const getAngularDependencies: ClientDependenciesBuilder = () =>\n  ANGULAR_DEPENDENCIES;\n\nexport const generateAngularTitle: ClientTitleBuilder = (title) => {\n  const sanTitle = sanitize(title);\n  return `${pascal(sanTitle)}Service`;\n};\n\nexport const generateAngularHeader: ClientHeaderBuilder = ({\n  title,\n  isRequestOptions,\n  isMutator,\n  isGlobalMutator,\n  provideIn,\n}) => `\n${\n  isRequestOptions && !isGlobalMutator\n    ? `interface HttpClientOptions {\n  headers?: HttpHeaders | Record<string, string | string[]>;\n  context?: HttpContext;\n  params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n  reportProgress?: boolean;\n  withCredentials?: boolean;\n  credentials?: RequestCredentials;\n  keepalive?: boolean;\n  priority?: RequestPriority;\n  cache?: RequestCache;\n  mode?: RequestMode;\n  redirect?: RequestRedirect;\n  referrer?: string;\n  integrity?: string;\n  transferCache?: {includeHeaders?: string[]} | boolean;\n  timeout?: number;\n}`\n    : ''\n}\n\n${\n  isRequestOptions && isMutator\n    ? `// eslint-disable-next-line\n    type ThirdParameter<T extends (...args: any) => any> = T extends (\n  config: any,\n  httpClient: any,\n  args: infer P,\n) => any\n  ? P\n  : never;`\n    : ''\n}\n\n@Injectable(${\n  provideIn\n    ? `{ providedIn: '${isBoolean(provideIn) ? 'root' : provideIn}' }`\n    : ''\n})\nexport class ${title} {\n  private readonly http = inject(HttpClient);\n`;\n\nexport const generateAngularFooter: ClientFooterBuilder = ({\n  operationNames,\n}) => {\n  let footer = '};\\n\\n';\n\n  for (const operationName of operationNames) {\n    if (returnTypesToWrite.has(operationName)) {\n      footer += returnTypesToWrite.get(operationName) + '\\n';\n    }\n  }\n\n  return footer;\n};\n\nconst generateImplementation = (\n  {\n    headers,\n    queryParams,\n    operationName,\n    response,\n    mutator,\n    body,\n    props,\n    verb,\n    override,\n    formData,\n    formUrlEncoded,\n    paramsSerializer,\n  }: GeneratorVerbOptions,\n  { route, context }: GeneratorOptions,\n) => {\n  const isRequestOptions = override?.requestOptions !== false;\n  const isFormData = !override?.formData.disabled;\n  const isFormUrlEncoded = override?.formUrlEncoded !== false;\n  const isExactOptionalPropertyTypes =\n    !!context.output.tsconfig?.compilerOptions?.exactOptionalPropertyTypes;\n  const bodyForm = generateFormDataAndUrlEncodedFunction({\n    formData,\n    formUrlEncoded,\n    body,\n    isFormData,\n    isFormUrlEncoded,\n  });\n\n  const dataType = response.definition.success || 'unknown';\n\n  returnTypesToWrite.set(\n    operationName,\n    `export type ${pascal(\n      operationName,\n    )}ClientResult = NonNullable<${dataType}>`,\n  );\n\n  if (mutator) {\n    const mutatorConfig = generateMutatorConfig({\n      route,\n      body,\n      headers,\n      queryParams,\n      response,\n      verb,\n      isFormData,\n      isFormUrlEncoded,\n      hasSignal: false,\n      isExactOptionalPropertyTypes,\n    });\n\n    const requestOptions = isRequestOptions\n      ? generateMutatorRequestOptions(\n          override?.requestOptions,\n          mutator.hasThirdArg,\n        )\n      : '';\n\n    const propsImplementation =\n      mutator.bodyTypeName && body.definition\n        ? toObjectString(props, 'implementation').replace(\n            new RegExp(`(\\\\w*):\\\\s?${body.definition}`),\n            `$1: ${mutator.bodyTypeName}<${body.definition}>`,\n          )\n        : toObjectString(props, 'implementation');\n\n    return ` ${operationName}<TData = ${dataType}>(\\n    ${propsImplementation}\\n ${\n      isRequestOptions && mutator.hasThirdArg\n        ? `options?: ThirdParameter<typeof ${mutator.name}>`\n        : ''\n    }) {${bodyForm}\n      return ${mutator.name}<TData>(\n      ${mutatorConfig},\n      this.http,\n      ${requestOptions});\n    }\n  `;\n  }\n\n  const options = generateOptions({\n    route,\n    body,\n    headers,\n    queryParams,\n    response,\n    verb,\n    requestOptions: override?.requestOptions,\n    isFormData,\n    isFormUrlEncoded,\n    paramsSerializer,\n    paramsSerializerOptions: override?.paramsSerializerOptions,\n    isAngular: true,\n    isExactOptionalPropertyTypes,\n    hasSignal: false,\n  });\n\n  const propsDefinition = toObjectString(props, 'definition');\n  const isModelType = dataType !== 'Blob' && dataType !== 'string';\n  let functionName = operationName;\n  if (isModelType) functionName += `<TData = ${dataType}>`;\n\n  const overloads = isRequestOptions\n    ? `${functionName}(${propsDefinition} options?: HttpClientOptions & { observe?: 'body' }): Observable<${isModelType ? 'TData' : dataType}>;\n ${functionName}(${propsDefinition} options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<${isModelType ? 'TData' : dataType}>>;\n ${functionName}(${propsDefinition} options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<${isModelType ? 'TData' : dataType}>>;`\n    : '';\n\n  return ` ${overloads}\n  ${functionName}(\n    ${toObjectString(props, 'implementation')} ${\n      isRequestOptions ? `options?: HttpClientOptions & { observe?: any }` : ''\n    }): Observable<any> {${bodyForm}\n    return this.http.${verb}${isModelType ? '<TData>' : ''}(${options});\n  }\n`;\n};\n\nexport const generateAngular: ClientBuilder = (verbOptions, options) => {\n  const imports = generateVerbImports(verbOptions);\n  const implementation = generateImplementation(verbOptions, options);\n\n  return { implementation, imports };\n};\n\nconst angularClientBuilder: ClientGeneratorsBuilder = {\n  client: generateAngular,\n  header: generateAngularHeader,\n  dependencies: getAngularDependencies,\n  footer: generateAngularFooter,\n  title: generateAngularTitle,\n};\n\nexport const builder = () => () => angularClientBuilder;\n\nexport default builder;\n"],"mappings":"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"}