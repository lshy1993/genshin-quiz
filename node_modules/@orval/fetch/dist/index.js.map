{"version":3,"file":"index.js","names":["GetterPropType","headersToAdd: string[]","generateClient: ClientBuilder","generateFetchHeader: ClientHeaderBuilder","fetchClientBuilder: ClientGeneratorsBuilder"],"sources":["../src/index.ts"],"sourcesContent":["import { ClientHeaderBuilder, pascal } from '@orval/core';\nimport {\n  camel,\n  ClientBuilder,\n  ClientGeneratorsBuilder,\n  generateFormDataAndUrlEncodedFunction,\n  generateVerbImports,\n  GeneratorOptions,\n  GeneratorVerbOptions,\n  GetterPropType,\n  stringify,\n  toObjectString,\n  generateBodyOptions,\n  isObject,\n  resolveRef,\n} from '@orval/core';\nimport {\n  PathItemObject,\n  ParameterObject,\n  ReferenceObject,\n} from 'openapi3-ts/oas30';\nimport { SchemaObject } from 'openapi3-ts/oas31';\n\nexport const generateRequestFunction = (\n  {\n    queryParams,\n    headers,\n    operationName,\n    response,\n    mutator,\n    body,\n    props,\n    verb,\n    fetchReviver,\n    formData,\n    formUrlEncoded,\n    override,\n  }: GeneratorVerbOptions,\n  { route, context, pathRoute }: GeneratorOptions,\n) => {\n  const isRequestOptions = override?.requestOptions !== false;\n  const isFormData = override?.formData.disabled === false;\n  const isFormUrlEncoded = override?.formUrlEncoded !== false;\n\n  const getUrlFnName = camel(`get-${operationName}-url`);\n  const getUrlFnProps = toObjectString(\n    props.filter(\n      (prop) =>\n        prop.type === GetterPropType.PARAM ||\n        prop.type === GetterPropType.NAMED_PATH_PARAMS ||\n        prop.type === GetterPropType.QUERY_PARAM,\n    ),\n    'implementation',\n  );\n\n  const spec = context.specs[context.specKey].paths[pathRoute] as\n    | PathItemObject\n    | undefined;\n  const parameters =\n    spec?.[verb]?.parameters || ([] as (ParameterObject | ReferenceObject)[]);\n\n  const explodeParameters = parameters.filter((parameter) => {\n    const { schema } = resolveRef<ParameterObject>(parameter, context);\n    const schemaObject = schema.schema as SchemaObject;\n\n    return (\n      schema.in === 'query' &&\n      schemaObject.type === 'array' &&\n      (schema.explode || override.fetch.explode)\n    );\n  });\n\n  const explodeParametersNames = explodeParameters.map((parameter) => {\n    const { schema } = resolveRef<ParameterObject>(parameter, context);\n\n    return schema.name;\n  });\n  const hasDateParams =\n    context.output.override.useDates &&\n    parameters.some(\n      (p) =>\n        'schema' in p &&\n        p.schema &&\n        'format' in p.schema &&\n        p.schema.format === 'date-time',\n    );\n\n  const explodeArrayImplementation =\n    explodeParameters.length > 0\n      ? `const explodeParameters = ${JSON.stringify(explodeParametersNames)};\n\n    if (Array.isArray(value) && explodeParameters.includes(key)) {\n      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : ${hasDateParams ? 'v instanceof Date ? v.toISOString() : ' : ''}v.toString()));\n      return;\n    }\n      `\n      : '';\n\n  const isExplodeParametersOnly =\n    explodeParameters.length === parameters.length;\n\n  const nomalParamsImplementation = `if (value !== undefined) {\n      normalizedParams.append(key, value === null ? 'null' : ${hasDateParams ? 'value instanceof Date ? value.toISOString() : ' : ''}value.toString())\n    }`;\n\n  const getUrlFnImplementation = `export const ${getUrlFnName} = (${getUrlFnProps}) => {\n${\n  queryParams\n    ? `  const normalizedParams = new URLSearchParams();\n\n  Object.entries(params || {}).forEach(([key, value]) => {\n    ${explodeArrayImplementation}\n    ${!isExplodeParametersOnly ? nomalParamsImplementation : ''}\n  });`\n    : ''\n}\n\n  ${queryParams ? `const stringifiedParams = normalizedParams.toString();` : ``}\n\n  ${\n    queryParams\n      ? `return stringifiedParams.length > 0 ? \\`${route}${'?${stringifiedParams}'}\\` : \\`${route}\\``\n      : `return \\`${route}\\``\n  }\n}\\n`;\n\n  const isContentTypeNdJson = (contentType: string) =>\n    contentType === 'application/nd-json' ||\n    contentType === 'application/x-ndjson';\n\n  const isNdJson = response.contentTypes.some(isContentTypeNdJson);\n  const responseTypeName = fetchResponseTypeName(\n    override.fetch?.includeHttpResponseReturnType,\n    isNdJson ? 'Response' : response.definition.success,\n    operationName,\n  );\n\n  const allResponses = [...response.types.success, ...response.types.errors];\n  if (allResponses.length === 0) {\n    allResponses.push({\n      contentType: '',\n      hasReadonlyProps: false,\n      imports: [],\n      isEnum: false,\n      isRef: false,\n      key: 'default',\n      schemas: [],\n      type: 'unknown',\n      value: 'unknown',\n    });\n  }\n  const nonDefaultStatuses = allResponses\n    .filter((r) => r.key !== 'default')\n    .map((r) => r.key);\n  const responseDataTypes = allResponses\n    .map((r) =>\n      allResponses.filter((r2) => r2.key === r.key).length > 1\n        ? { ...r, suffix: pascal(r.contentType) }\n        : r,\n    )\n    .map((r) => {\n      const name = `${responseTypeName}${pascal(r.key)}${'suffix' in r ? r.suffix : ''}`;\n      return {\n        name,\n        success: response.types.success.some((s) => s.key === r.key),\n        value: `export type ${name} = {\n  ${isContentTypeNdJson(r.contentType) ? `stream: TypedResponse<${r.value}>` : `data: ${r.value || 'unknown'}`}\n  status: ${\n    r.key === 'default'\n      ? nonDefaultStatuses.length\n        ? `Exclude<HTTPStatusCodes, ${nonDefaultStatuses.join(' | ')}>`\n        : 'number'\n      : r.key\n  }\n}`,\n      };\n    });\n\n  const successName = `${responseTypeName}Success`;\n  const errorName = `${responseTypeName}Error`;\n  const hasSuccess = responseDataTypes.some((r) => r.success);\n  const hasError = responseDataTypes.some((r) => !r.success);\n\n  const responseTypeImplementation = override.fetch\n    .includeHttpResponseReturnType\n    ? `${responseDataTypes.map((r) => r.value).join('\\n\\n')}\n    \n${\n  hasSuccess\n    ? `export type ${successName} = (${responseDataTypes\n        .filter((r) => r.success)\n        .map((r) => r.name)\n        .join(' | ')}) & {\n  headers: Headers;\n}`\n    : ''\n};\n${\n  hasError\n    ? `export type ${errorName} = (${responseDataTypes\n        .filter((r) => !r.success)\n        .map((r) => r.name)\n        .join(' | ')}) & {\n  headers: Headers;\n}`\n    : ''\n};\n\n${override.fetch.forceSuccessResponse && hasSuccess ? '' : `export type ${responseTypeName} = (${hasError && hasSuccess ? `${successName} | ${errorName}` : hasSuccess ? successName : errorName})\\n\\n`}`\n    : '';\n\n  const getUrlFnProperties = props\n    .filter(\n      (prop) =>\n        prop.type === GetterPropType.PARAM ||\n        prop.type === GetterPropType.QUERY_PARAM ||\n        prop.type === GetterPropType.NAMED_PATH_PARAMS,\n    )\n    .map((param) => {\n      if (param.type === GetterPropType.NAMED_PATH_PARAMS) {\n        return param.destructured;\n      } else {\n        return param.name;\n      }\n    })\n    .join(',');\n\n  const args = `${toObjectString(props, 'implementation')} ${isRequestOptions ? `options?: RequestInit` : ''}`;\n  const returnType =\n    override.fetch.forceSuccessResponse && hasSuccess\n      ? `Promise<${successName}>`\n      : `Promise<${responseTypeName}>`;\n\n  const globalFetchOptions = isObject(override?.requestOptions)\n    ? `${stringify(override?.requestOptions)?.slice(1, -1)?.trim()}`\n    : '';\n  const fetchMethodOption = `method: '${verb.toUpperCase()}'`;\n  const ignoreContentTypes = ['multipart/form-data'];\n  const headersToAdd: string[] = [\n    ...(body.contentType && !ignoreContentTypes.includes(body.contentType)\n      ? [`'Content-Type': '${body.contentType}'`]\n      : []),\n    ...(isNdJson && response.contentTypes.length === 1\n      ? [\n          `Accept: ${\n            response.contentTypes[0] === 'application/x-ndjson'\n              ? \"'application/x-ndjson'\"\n              : \"'application/nd-json'\"\n          }`,\n        ]\n      : []),\n    ...(headers ? ['...headers'] : []),\n  ];\n  const fetchHeadersOption = headersToAdd.length\n    ? `headers: { ${headersToAdd.join(',')}, ...options?.headers }`\n    : '';\n  const requestBodyParams = generateBodyOptions(\n    body,\n    isFormData,\n    isFormUrlEncoded,\n  );\n  const fetchBodyOption = requestBodyParams\n    ? (isFormData && body.formData) ||\n      (isFormUrlEncoded && body.formUrlEncoded) ||\n      body.contentType === 'text/plain'\n      ? `body: ${requestBodyParams}`\n      : `body: JSON.stringify(${requestBodyParams})`\n    : '';\n\n  const fetchFnOptions = `${getUrlFnName}(${getUrlFnProperties}),\n  {${globalFetchOptions ? '\\n' : ''}      ${globalFetchOptions}\n    ${isRequestOptions ? '...options,' : ''}\n    ${fetchMethodOption}${fetchHeadersOption ? ',' : ''}\n    ${fetchHeadersOption}${fetchBodyOption ? ',' : ''}\n    ${fetchBodyOption}\n  }\n`;\n  const reviver = fetchReviver ? `, ${fetchReviver.name}` : '';\n  const throwOnErrorImplementation = `if (!${isNdJson ? 'stream' : 'res'}.ok) {\n    ${isNdJson ? 'const body = [204, 205, 304].includes(stream.status) ? null : await stream.text();' : ''}\n    const err: globalThis.Error & {info?: ${hasError ? `${errorName}${override.fetch.includeHttpResponseReturnType ? \"['data']\" : ''}` : 'any'}, status?: number} = new globalThis.Error();\n    const data ${hasError ? `: ${errorName}${override.fetch.includeHttpResponseReturnType ? `['data']` : ''}` : ''} = body ? JSON.parse(body${reviver}) : {}\n    err.info = data;\n    err.status = ${isNdJson ? 'stream' : 'res'}.status;\n    throw err;\n  }`;\n  const fetchResponseImplementation = isNdJson\n    ? `  const stream = await fetch(${fetchFnOptions});\n  ${override.fetch.forceSuccessResponse ? throwOnErrorImplementation : ''}\n  ${override.fetch.includeHttpResponseReturnType ? `return { status: stream.status, stream, headers: stream.headers } as ${override.fetch.forceSuccessResponse && hasSuccess ? successName : responseTypeName}` : `return stream`}\n  `\n    : `const res = await fetch(${fetchFnOptions})\n\n  const body = [204, 205, 304].includes(res.status) ? null : await res.text();\n  ${override.fetch.forceSuccessResponse ? throwOnErrorImplementation : ''}\n  const data: ${override.fetch.forceSuccessResponse && hasSuccess ? successName : responseTypeName}${override.fetch.includeHttpResponseReturnType ? `['data']` : ''} = body ? JSON.parse(body${reviver}) : {}\n  ${override.fetch.includeHttpResponseReturnType ? `return { data, status: res.status, headers: res.headers } as ${override.fetch.forceSuccessResponse && hasSuccess ? successName : responseTypeName}` : 'return data'}\n`;\n  const customFetchResponseImplementation = `return ${mutator?.name}<${override.fetch.forceSuccessResponse && hasSuccess ? successName : responseTypeName}>(${fetchFnOptions});`;\n\n  const bodyForm = generateFormDataAndUrlEncodedFunction({\n    formData,\n    formUrlEncoded,\n    body,\n    isFormData,\n    isFormUrlEncoded,\n  });\n\n  const fetchImplementationBody = mutator\n    ? customFetchResponseImplementation\n    : fetchResponseImplementation;\n\n  const fetchImplementation = `export const ${operationName} = async (${args}): ${returnType} => {\n  ${bodyForm ? `  ${bodyForm}` : ''}\n  ${fetchImplementationBody}}\n`;\n\n  const implementation =\n    `${responseTypeImplementation}` +\n    `${getUrlFnImplementation}\\n` +\n    `${fetchImplementation}\\n`;\n\n  return implementation;\n};\n\nexport const fetchResponseTypeName = (\n  includeHttpResponseReturnType: boolean | undefined,\n  definitionSuccessResponse: string,\n  operationName: string,\n) => {\n  return includeHttpResponseReturnType\n    ? `${operationName}Response`\n    : definitionSuccessResponse;\n};\n\nexport const generateClient: ClientBuilder = (verbOptions, options) => {\n  const imports = generateVerbImports(verbOptions);\n  const functionImplementation = generateRequestFunction(verbOptions, options);\n\n  return {\n    implementation: `${functionImplementation}\\n`,\n    imports,\n  };\n};\n\nconst getHTTPStatusCodes = () => `\nexport type HTTPStatusCode1xx = 100 | 101 | 102 | 103;\nexport type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;\nexport type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;\nexport type HTTPStatusCode4xx = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 426 | 428 | 429 | 431 | 451;\nexport type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;\nexport type HTTPStatusCodes = HTTPStatusCode1xx | HTTPStatusCode2xx | HTTPStatusCode3xx | HTTPStatusCode4xx | HTTPStatusCode5xx;\n\n`;\n\nexport const generateFetchHeader: ClientHeaderBuilder = ({\n  clientImplementation,\n}) => {\n  return clientImplementation.includes('<HTTPStatusCodes,')\n    ? getHTTPStatusCodes()\n    : '';\n};\n\nconst fetchClientBuilder: ClientGeneratorsBuilder = {\n  client: generateClient,\n  header: generateFetchHeader,\n  dependencies: () => [],\n};\n\nexport const builder = () => () => fetchClientBuilder;\n\nexport default builder;\n"],"mappings":"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"}