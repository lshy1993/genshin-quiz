{"version":3,"file":"orval.js","names":["pkg","program","Option","OutputMode","OutputClient","normalizeOptions","startWatcher","generateSpec","ErrorWithTag","generateConfig"],"sources":["../../src/bin/orval.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { Option, program } from '@commander-js/extra-typings';\nimport {\n  ErrorWithTag,\n  isString,\n  log,\n  logError,\n  OutputClient,\n  OutputMode,\n  startMessage,\n} from '@orval/core';\n\nimport pkg from '../../package.json';\nimport { generateConfig, generateSpec } from '../generate';\nimport { normalizeOptions } from '../utils/options';\nimport { startWatcher } from '../utils/watcher';\n\nconst orvalMessage = startMessage({\n  name: pkg.name,\n  version: pkg.version,\n  description: pkg.description,\n});\nconst cli = program\n  .name('orval')\n  .description(orvalMessage)\n  .version(pkg.version);\n\ncli\n  .option('-o, --output <path>', 'output file destination')\n  .option('-i, --input <path>', 'input file (yaml or json openapi specs)')\n  .option('-c, --config <path>', 'override flags by a config file')\n  .option('-p, --project <name>', 'focus a project of the config')\n  .addOption(\n    new Option('-m, --mode <name>', 'default mode that will be used').choices(\n      Object.values(OutputMode),\n    ),\n  )\n  .option(\n    '-w, --watch [path]',\n    'Watch mode, if path is not specified, it watches the input target',\n  )\n  .addOption(\n    new Option('--client <name>', 'default client that will be used').choices(\n      Object.values(OutputClient),\n    ),\n  )\n  .option('--mock', 'activate the mock')\n  .option('--clean [path...]', 'Clean output directory')\n  .option('--prettier', 'Prettier generated files')\n  .option('--biome', 'biome generated files')\n  .option('--tsconfig <path>', 'path to your tsconfig file')\n  .action(async (options) => {\n    log(orvalMessage);\n    if (\n      !options.config &&\n      isString(options.input) &&\n      isString(options.output)\n    ) {\n      const normalizedOptions = await normalizeOptions({\n        input: options.input,\n        output: {\n          target: options.output,\n          clean: options.clean,\n          prettier: options.prettier,\n          biome: options.biome,\n          mock: options.mock,\n          client: options.client,\n          mode: options.mode,\n          tsconfig: options.tsconfig,\n        },\n      });\n\n      if (options.watch) {\n        await startWatcher(\n          options.watch,\n          async () => {\n            try {\n              await generateSpec(process.cwd(), normalizedOptions);\n            } catch (error) {\n              logError(error);\n              process.exit(1);\n            }\n          },\n          normalizedOptions.input.target as string,\n        );\n      } else {\n        try {\n          await generateSpec(process.cwd(), normalizedOptions);\n        } catch (error) {\n          if (error instanceof ErrorWithTag) {\n            logError(error.cause, error.tag);\n          } else {\n            logError(error);\n          }\n          process.exit(1);\n        }\n      }\n    } else {\n      await generateConfig(options.config, {\n        projectName: options.project,\n        watch: options.watch,\n        clean: options.clean,\n        prettier: options.prettier,\n        biome: options.biome,\n        mock: options.mock,\n        client: options.client,\n        mode: options.mode,\n        tsconfig: options.tsconfig,\n        input: options.input,\n        output: options.output,\n      });\n    }\n  });\n\n// TODO when moving to pure ESM change void to await\nvoid cli.parseAsync(process.argv);\n"],"mappings":";;;;;;;;AAiBA,MAAM,8CAA4B;CAChC,MAAMA,iCAAI;CACV,SAASA,iCAAI;CACb,aAAaA,iCAAI;CAClB,CAAC;AACF,MAAM,MAAMC,qCACT,KAAK,QAAQ,CACb,YAAY,aAAa,CACzB,QAAQD,iCAAI,QAAQ;AAEvB,IACG,OAAO,uBAAuB,0BAA0B,CACxD,OAAO,sBAAsB,0CAA0C,CACvE,OAAO,uBAAuB,kCAAkC,CAChE,OAAO,wBAAwB,gCAAgC,CAC/D,UACC,IAAIE,oCAAO,qBAAqB,iCAAiC,CAAC,QAChE,OAAO,OAAOC,wBAAW,CAC1B,CACF,CACA,OACC,sBACA,oEACD,CACA,UACC,IAAID,oCAAO,mBAAmB,mCAAmC,CAAC,QAChE,OAAO,OAAOE,0BAAa,CAC5B,CACF,CACA,OAAO,UAAU,oBAAoB,CACrC,OAAO,qBAAqB,yBAAyB,CACrD,OAAO,cAAc,2BAA2B,CAChD,OAAO,WAAW,wBAAwB,CAC1C,OAAO,qBAAqB,6BAA6B,CACzD,OAAO,OAAO,YAAY;AACzB,uBAAI,aAAa;AACjB,KACE,CAAC,QAAQ,qCACA,QAAQ,MAAM,+BACd,QAAQ,OAAO,EACxB;EACA,MAAM,oBAAoB,MAAMC,kCAAiB;GAC/C,OAAO,QAAQ;GACf,QAAQ;IACN,QAAQ,QAAQ;IAChB,OAAO,QAAQ;IACf,UAAU,QAAQ;IAClB,OAAO,QAAQ;IACf,MAAM,QAAQ;IACd,QAAQ,QAAQ;IAChB,MAAM,QAAQ;IACd,UAAU,QAAQ;IACnB;GACF,CAAC;AAEF,MAAI,QAAQ,MACV,OAAMC,8BACJ,QAAQ,OACR,YAAY;AACV,OAAI;AACF,UAAMC,8BAAa,QAAQ,KAAK,EAAE,kBAAkB;YAC7C,OAAO;AACd,+BAAS,MAAM;AACf,YAAQ,KAAK,EAAE;;KAGnB,kBAAkB,MAAM,OACzB;MAED,KAAI;AACF,SAAMA,8BAAa,QAAQ,KAAK,EAAE,kBAAkB;WAC7C,OAAO;AACd,OAAI,iBAAiBC,0BACnB,4BAAS,MAAM,OAAO,MAAM,IAAI;OAEhC,4BAAS,MAAM;AAEjB,WAAQ,KAAK,EAAE;;OAInB,OAAMC,gCAAe,QAAQ,QAAQ;EACnC,aAAa,QAAQ;EACrB,OAAO,QAAQ;EACf,OAAO,QAAQ;EACf,UAAU,QAAQ;EAClB,OAAO,QAAQ;EACf,MAAM,QAAQ;EACd,QAAQ,QAAQ;EAChB,MAAM,QAAQ;EACd,UAAU,QAAQ;EAClB,OAAO,QAAQ;EACf,QAAQ,QAAQ;EACjB,CAAC;EAEJ;AAGC,IAAI,WAAW,QAAQ,KAAK"}