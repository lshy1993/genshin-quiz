{"version":3,"file":"index.js","names":["generateConfig","normalizeOptions","generateSpec"],"sources":["../src/index.ts"],"sourcesContent":["import {\n  type GlobalOptions,\n  isString,\n  logError,\n  type OptionsExport,\n} from '@orval/core';\n\nimport { generateConfig, generateSpec } from './generate';\nimport { normalizeOptions } from './utils/options';\nimport { startWatcher } from './utils/watcher';\n\nconst generate = async (\n  optionsExport?: string | OptionsExport,\n  workspace = process.cwd(),\n  options?: GlobalOptions,\n) => {\n  if (!optionsExport || isString(optionsExport)) {\n    return generateConfig(optionsExport, options);\n  }\n\n  const normalizedOptions = await normalizeOptions(\n    optionsExport,\n    workspace,\n    options,\n  );\n\n  if (options?.watch) {\n    startWatcher(\n      options?.watch,\n      async () => {\n        try {\n          await generateSpec(workspace, normalizedOptions);\n        } catch (error) {\n          logError(error, options?.projectName);\n        }\n      },\n      normalizedOptions.input.target as string,\n    );\n  } else {\n    try {\n      await generateSpec(workspace, normalizedOptions);\n      return;\n    } catch (error) {\n      logError(error, options?.projectName);\n    }\n  }\n};\n\nexport { generate };\nexport * from '@orval/core';\n\nexport default generate;\n\nexport { defineConfig } from './utils/options';\nexport type { Options } from '@orval/core';\n"],"mappings":";;;;;;AAWA,MAAM,WAAW,OACf,eACA,YAAY,QAAQ,KAAK,EACzB,YACG;AACH,KAAI,CAAC,4CAA0B,cAAc,CAC3C,QAAOA,gCAAe,eAAe,QAAQ;CAG/C,MAAM,oBAAoB,MAAMC,kCAC9B,eACA,WACA,QACD;AAED,KAAI,SAAS,MACX,+BACE,SAAS,OACT,YAAY;AACV,MAAI;AACF,SAAMC,8BAAa,WAAW,kBAAkB;WACzC,OAAO;AACd,8BAAS,OAAO,SAAS,YAAY;;IAGzC,kBAAkB,MAAM,OACzB;KAED,KAAI;AACF,QAAMA,8BAAa,WAAW,kBAAkB;AAChD;UACO,OAAO;AACd,6BAAS,OAAO,SAAS,YAAY;;;AAQ3C,kBAAe"}